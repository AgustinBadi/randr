fn linear_shiftback(
  seed: ByteArray,
  counter: Int,
  sequence: ByteArray,
) -> ByteArray {
  when counter is {
    0 -> sequence
    _ -> {
      let ultimate_byte = builtin.index_bytearray(seed, 31)
      let penultimate_byte = builtin.index_bytearray(seed, 30)
      let xor_step = arithmetic_xor2(penultimate_byte, ultimate_byte)
      let init = builtin.slice_bytearray(0, 31, seed)
      let shift = builtin.cons_bytearray(xor_step, init)
      let result = builtin.cons_bytearray(xor_step, sequence)
      linear_shiftback(shift, counter - 1, result)
    }
  }
}

test linear_shiftback_1() {
  linear_shiftback(
    #"41dd04e47a6906ea7641e7073c048e3195de1037d83adc87647c0e845ff5004b",
    32,
    #"",
  ) == #"1234"
}


(I 118), (I 94), (I 218), (I 180), (I 134), (I 113), (I 210), (I 142), (I 47), (I 164), (I 83), (I 72), (I 203), (I 220), (I 176), (I 8), (I
        213), (I 219), (I 42), (I 212), (I 80), (I 158), (I 137), (I 143), (I 164), (I 36), (I 230), (I 249), (I 19), (I 233), (I 129), (I 241)] │
        │ )

[(I 118), (I 94), (I 218), (I 180), (I 134), (I 113), (I 210), (I 142), (I 47), (I 164), (I 83), (I 72), (I 203), (I 220), (I 176), (I 8), (I
        213), (I 219), (I 42), (I 212), (I 80), (I 158), (I 137), (I 143), (I 164), (I 36), (I 230), (I 249), (I 19), (I 233), (I 129), (I 241)] │
        │ )


7 1 9 2 5 6 9 